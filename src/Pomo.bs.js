// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as $$Notification from "./Notification.bs.js";
import * as WorkerTimers from "worker-timers";
import * as JsxRuntime from "react/jsx-runtime";

function toString(x) {
  if (x !== 1) {
    if (x !== 0) {
      return "Long break";
    } else {
      return "Work";
    }
  } else {
    return "Short break";
  }
}

function toCSS(x) {
  switch (x) {
    case /* Work */0 :
        return " is-primary";
    case /* ShortBreak */1 :
        return " is-success";
    case /* LongBreak */2 :
        return " is-warning";
    case /* Idle */3 :
        return "";
    
  }
}

var Mode = {
  toString: toString,
  toCSS: toCSS
};

function Pomo$Button(props) {
  var disabled = props.disabled;
  var className = "nes-btn" + (
    disabled ? " is-disabled" : toCSS(props.class)
  );
  return JsxRuntime.jsx("button", {
              children: props.text,
              className: className,
              style: {
                margin: "1.5rem"
              },
              disabled: disabled,
              type: "button",
              onClick: props.onClick
            });
}

var Button = {
  make: Pomo$Button
};

function to2digits(x) {
  return (
          x > 9 ? "" : "0"
        ) + String(x);
}

function Pomo$TimeDisplay(props) {
  var remaining = props.remaining;
  var min = remaining / 60 | 0;
  var sec = remaining % 60;
  var display = to2digits(min) + ":" + to2digits(sec);
  return JsxRuntime.jsx("p", {
              children: JsxRuntime.jsx("time", {
                    children: display
                  }),
              className: "nes-text" + toCSS(props.mode),
              style: {
                fontSize: "5rem"
              }
            });
}

var TimeDisplay = {
  to2digits: to2digits,
  make: Pomo$TimeDisplay
};

function Pomo$Progress(props) {
  var className = "nes-progress" + toCSS(props.mode);
  return JsxRuntime.jsx("progress", {
              className: className,
              value: String(props.value)
            });
}

var Progress = {
  make: Pomo$Progress
};

function Pomo$History(props) {
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx("ul", {
                    children: Belt_Array.mapWithIndex(props.history, (function (id, mode) {
                            return JsxRuntime.jsx("li", {
                                        children: toString(mode),
                                        className: "nes-text" + toCSS(mode)
                                      }, String(id));
                          })),
                    className: "nes-list is-disc"
                  }),
              className: "lists",
              style: {
                textAlign: "left"
              }
            });
}

var $$History = {
  make: Pomo$History
};

function Pomo(props) {
  var match = React.useState(function () {
        return 0;
      });
  var setPassed = match[1];
  var passed = match[0];
  var match$1 = React.useState(function () {
        return 0;
      });
  var setTotal = match$1[1];
  var total = match$1[0];
  var match$2 = React.useState(function () {
        return 0;
      });
  var setProgress = match$2[1];
  var match$3 = React.useState(function () {
        return false;
      });
  var setPaused = match$3[1];
  var paused = match$3[0];
  var match$4 = React.useState(function () {
        return /* Idle */3;
      });
  var setMode = match$4[1];
  var mode = match$4[0];
  var match$5 = React.useState(function () {
        return [];
      });
  var setHistory = match$5[1];
  var switchToMode = function (m) {
    Curry._1(setMode, (function (param) {
            return m;
          }));
    Curry._1(setPassed, (function (param) {
            return 0;
          }));
    Curry._1(setProgress, (function (param) {
            return 0;
          }));
  };
  React.useEffect((function () {
          Curry._1(setTotal, (function (param) {
                  switch (mode) {
                    case /* Work */0 :
                        return 1500;
                    case /* ShortBreak */1 :
                        return 300;
                    case /* LongBreak */2 :
                        return 900;
                    case /* Idle */3 :
                        return 0;
                    
                  }
                }));
        }), [mode]);
  React.useEffect((function () {
          var id = WorkerTimers.setTimeout((function (param) {
                  if (!(!paused && passed < total)) {
                    return ;
                  }
                  var passed$1 = passed + 1 | 0;
                  if (passed$1 === total) {
                    $$Notification.make(mode !== 1 ? (
                            mode !== 0 ? "Long break finished, time to work!" : "Work period finished, time for a break!"
                          ) : "Short break finished, time to work!");
                    Curry._1(setHistory, (function (history) {
                            return Belt_Array.concat([mode], history);
                          }));
                    return switchToMode(/* Idle */3);
                  } else {
                    Curry._1(setPassed, (function (param) {
                            return passed$1;
                          }));
                    return Curry._1(setProgress, (function (param) {
                                  return passed$1 / total;
                                }));
                  }
                }), 1000);
          return (function (param) {
                    WorkerTimers.clearTimeout(id);
                  });
        }), [
        passed,
        total,
        paused
      ]);
  var title;
  switch (mode) {
    case /* Work */0 :
        title = "Keep working!";
        break;
    case /* ShortBreak */1 :
        title = "Drink some water!";
        break;
    case /* LongBreak */2 :
        title = "Walk around!";
        break;
    case /* Idle */3 :
        title = "Please press any button!";
        break;
    
  }
  var buttonForMode = function (m) {
    return JsxRuntime.jsx(Pomo$Button, {
                disabled: paused,
                onClick: (function (param) {
                    if (Notification.permission === "default") {
                      Notification.requestPermission();
                    }
                    return switchToMode(m);
                  }),
                class: m,
                text: toString(m)
              });
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("p", {
                      children: title,
                      className: "title"
                    }),
                JsxRuntime.jsx(Pomo$TimeDisplay, {
                      remaining: total - passed | 0,
                      mode: mode
                    }),
                JsxRuntime.jsx(Pomo$Progress, {
                      value: match$2[0],
                      mode: mode
                    }),
                buttonForMode(/* Work */0),
                buttonForMode(/* ShortBreak */1),
                buttonForMode(/* LongBreak */2),
                JsxRuntime.jsx(Pomo$Button, {
                      disabled: mode === /* Idle */3,
                      onClick: (function (param) {
                          Curry._1(setPaused, (function (p) {
                                  return !p;
                                }));
                        }),
                      class: /* Idle */3,
                      text: paused ? "Resume" : "Pause"
                    }),
                JsxRuntime.jsx(Pomo$History, {
                      history: match$5[0]
                    })
              ],
              className: "nes-container with-title is-centered"
            });
}

var make = Pomo;

export {
  Mode ,
  Button ,
  TimeDisplay ,
  Progress ,
  $$History ,
  make ,
}
/* react Not a pure module */
